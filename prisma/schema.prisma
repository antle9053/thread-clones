// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model users {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  userId            String          @unique
  username          String?
  name              String
  avatar            String?
  bio               String?
  links             String[]
  threads           threads[]
  usedTags          tags[]          @relation(fields: [usedTagIds], references: [id])
  usedTagIds        String[]        @db.ObjectId
  votedOptions      options[]       @relation(fields: [votedOptionIds], references: [id])
  votedOptionIds    String[]        @db.ObjectId
  savedThreads      threads[]       @relation("Saves", fields: [savedThreadIds], references: [id])
  savedThreadIds    String[]        @db.ObjectId
  followedBy        users[]         @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs     String[]        @db.ObjectId
  following         users[]         @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs      String[]        @db.ObjectId
  reposts           reposts[]
  likes             likes[]
  socketId          String?
  sendNotifications notifications[]
  notifications     sends[]
}

model sends {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  notification   notifications @relation(fields: [notificationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notificationId String        @db.ObjectId
  user           users         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String        @db.ObjectId
  sendAt         DateTime      @default(now())
}

model notifications {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  sender           users   @relation(fields: [senderId], references: [id])
  senderId         String  @db.ObjectId
  notificationType String
  recievers        sends[]
  title            String
  content          String?
  url              String?
  read             Boolean @default(false)
}

model threads {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  authorId       String
  author         users     @relation(fields: [authorId], references: [userId])
  content        contents?
  parentId       String?   @db.ObjectId
  parent         threads?  @relation("ParentChilds", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  child          threads[] @relation("ParentChilds")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  savedByUsers   users[]   @relation("Saves", fields: [savedByUserIds], references: [id])
  savedByUserIds String[]  @db.ObjectId
  reposted       reposts[]
  likes          likes[]
  quotedThread   threads?  @relation("Quotes", fields: [quotedThreadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quotedThreadId String?   @unique @db.ObjectId
  quotedByThread threads[] @relation("Quotes")
  views          Int       @default(0)
}

model reposts {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  thread     threads  @relation(fields: [threadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  threadId   String   @db.ObjectId
  user       users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String   @db.ObjectId
  repostedAt DateTime @default(now())
}

model likes {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  thread   threads  @relation(fields: [threadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  threadId String   @db.ObjectId
  user     users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String   @db.ObjectId
  likedAt  DateTime @default(now())
}

model contents {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  thread      threads  @relation(fields: [threadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  threadId    String   @unique @db.ObjectId
  text        String
  contentType String
  files       files[]
  tags        tags[]   @relation(fields: [tagIds], references: [id])
  tagIds      String[] @db.ObjectId
  gif         String?
  poll        polls?
}

model files {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  contentId String   @db.ObjectId
  content   contents @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url       String
  type      String
}

model tags {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  title      String     @unique
  contents   contents[] @relation(fields: [contentIds], references: [id])
  contentIds String[]   @db.ObjectId
  users      users[]    @relation(fields: [userIds], references: [id])
  userIds    String[]   @db.ObjectId
}

model polls {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  options   options[]
  createdAt DateTime  @default(now())
  content   contents  @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contentId String    @unique @db.ObjectId
}

model options {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  text    String
  users   users[]  @relation(fields: [userIds], references: [id])
  userIds String[] @db.ObjectId
  pollId  String   @db.ObjectId
  poll    polls    @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
